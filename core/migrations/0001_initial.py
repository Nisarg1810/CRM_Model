# Generated by Django 5.1.4 on 2025-09-09 10:46

import datetime
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advocate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Advocate',
                'verbose_name_plural': 'Advocates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('state', models.CharField(default='Gujarat', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SataPrakar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the document type', max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Sata Prakar',
                'verbose_name_plural': 'Sata Prakar',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Task name', max_length=255)),
                ('position', models.PositiveIntegerField(default=0, help_text='Display position of the task')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is a default task')),
                ('completion_days', models.PositiveIntegerField(default=0, help_text='Expected completion time in days')),
                ('marketing_task', models.BooleanField(default=False, help_text='Whether this is a marketing-specific task')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['position', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('employee', 'Employee')], max_length=20)),
                ('employee_type', models.CharField(blank=True, choices=[('marketing', 'Marketing'), ('backoffice', 'Back Office'), ('legal_team', 'Legal Team'), ('other', 'Other')], max_length=20)),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True)),
                ('mobile', models.CharField(blank=True, max_length=20)),
                ('location', models.CharField(blank=True, help_text='Area covered', max_length=255)),
                ('address', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_type', models.CharField(choices=[('property_owner', 'Property Owner'), ('lead_generation', 'Lead Generation'), ('web_by_reference', 'Web By Reference'), ('direct_visit', 'Direct Visit')], default='property_owner', max_length=20)),
                ('search_property_title', models.CharField(blank=True, max_length=255, null=True)),
                ('client_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('mobile_no', models.CharField(max_length=15)),
                ('another_mobile_no', models.CharField(blank=True, max_length=15, null=True)),
                ('whatsapp_no', models.CharField(max_length=15)),
                ('pan_no', models.CharField(blank=True, max_length=20, null=True)),
                ('adhar_card_no', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('approx_investment', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('choice_in_particular_property', models.TextField(blank=True, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('anniversary', models.DateField(blank=True, null=True)),
                ('any_event', models.DateField(blank=True, null=True)),
                ('remark', models.TextField(blank=True, help_text='Additional remarks or notes about the client', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the client is active or not')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clients_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('state', models.CharField(default='Gujarat', max_length=100)),
                ('old_sr_no', models.CharField(default='', max_length=50)),
                ('new_sr_no', models.CharField(default='', max_length=50)),
                ('sata_prakar', models.CharField(max_length=255)),
                ('built_up_area', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('unutilized_area', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_area', models.DecimalField(decimal_places=2, max_digits=10)),
                ('past_date', models.DateField(blank=True, null=True)),
                ('soda_tarikh', models.DateField(default=datetime.date.today)),
                ('banakhat_tarikh', models.DateField(default=datetime.date.today)),
                ('dastavej_tarikh', models.DateField(default=datetime.date.today)),
                ('broker_name', models.CharField(default='', max_length=255)),
                ('location', models.CharField(blank=True, help_text='Additional location details', max_length=255)),
                ('remark', models.TextField(blank=True, help_text='Additional remarks or notes')),
                ('selected_tasks', models.TextField(blank=True, help_text='Comma-separated list of selected tasks')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inventory', 'In Inventory'), ('in_process', 'In Process'), ('sold', 'Sold'), ('archived', 'Archived')], default='active', max_length=20)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lands', to='core.district')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='LandSale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buyer_name', models.CharField(help_text='Name of the buyer', max_length=255)),
                ('buyer_contact', models.CharField(blank=True, help_text='Contact number of buyer', max_length=20)),
                ('buyer_address', models.TextField(blank=True, help_text='Address of the buyer')),
                ('sale_date', models.DateField(help_text='Date when the sale was made')),
                ('agreement_date', models.DateField(blank=True, help_text='Date of sale agreement', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inventory', 'In Inventory'), ('in_process', 'In Process'), ('sold', 'Sold'), ('archived', 'Archived')], default='in_process', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the sale')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(blank=True, help_text='Client who purchased the land', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='land_sales', to='core.client')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_sales', to=settings.AUTH_USER_MODEL)),
                ('land', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='core.land')),
                ('marketing_employee', models.ForeignKey(blank=True, help_text='Marketing employee who handled the sale', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='marketing_sales', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Land Sale',
                'verbose_name_plural': 'Land Sales',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Installment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installment_number', models.PositiveIntegerField(help_text='Installment number (1, 2, 3, etc.)')),
                ('percentage', models.DecimalField(decimal_places=2, help_text='Percentage of total amount', max_digits=5)),
                ('payment_type', models.CharField(choices=[('cash', 'Cash'), ('cheque', 'Cheque'), ('bank_transfer', 'Bank Transfer'), ('upi', 'UPI'), ('other', 'Other')], default='cash', max_length=20)),
                ('payment_reference', models.CharField(blank=True, help_text='Cheque number, transaction ID, etc.', max_length=255)),
                ('due_date', models.DateField(help_text='Due date for this installment')),
                ('paid_date', models.DateField(blank=True, help_text='Date when payment was received', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this installment')),
                ('remark', models.TextField(blank=True, help_text='Payment processing remarks')),
                ('rtgs_number', models.CharField(blank=True, help_text='RTGS number', max_length=100)),
                ('from_bank', models.CharField(blank=True, help_text='Sender bank name', max_length=255)),
                ('utr_reference', models.CharField(blank=True, help_text='UTR reference number', max_length=100)),
                ('ifsc_code', models.CharField(blank=True, help_text='IFSC code', max_length=11)),
                ('bank_name', models.CharField(blank=True, help_text='Bank name', max_length=255)),
                ('cheque_photo', models.ImageField(blank=True, help_text='Cheque photo', null=True, upload_to='payment_photos/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('received_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_payments', to=settings.AUTH_USER_MODEL)),
                ('land_sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installments', to='core.landsale')),
            ],
            options={
                'verbose_name': 'Installment',
                'verbose_name_plural': 'Installments',
                'ordering': ['land_sale', 'installment_number'],
                'unique_together': {('land_sale', 'installment_number')},
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('read_by_admin', models.BooleanField(default=False)),
                ('read_by_dev', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('reminder_time', models.DateTimeField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_reminders', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_reminders', to=settings.AUTH_USER_MODEL)),
                ('installment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='core.installment')),
            ],
            options={
                'verbose_name': 'Reminder',
                'verbose_name_plural': 'Reminders',
                'db_table': 'core_reminder',
                'ordering': ['-reminder_time', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Taluka',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='talukas', to='core.district')),
            ],
            options={
                'verbose_name': 'Taluka',
                'verbose_name_plural': 'Talukas',
                'ordering': ['name'],
                'unique_together': {('name', 'district')},
            },
        ),
        migrations.AddField(
            model_name='land',
            name='taluka',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lands', to='core.taluka'),
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('taluka', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='villages', to='core.taluka')),
            ],
            options={
                'verbose_name': 'Village',
                'verbose_name_plural': 'Villages',
                'ordering': ['name'],
                'unique_together': {('name', 'taluka')},
            },
        ),
        migrations.AddField(
            model_name='land',
            name='village',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lands', to='core.village'),
        ),
        migrations.CreateModel(
            name='AssignedTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('pending_approval', 'Pending Approval'), ('complete', 'Complete')], default='pending', max_length=20)),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('started_date', models.DateTimeField(blank=True, null=True)),
                ('completion_notes', models.TextField(blank=True, help_text='Notes from employee when completing task')),
                ('completion_photos', models.ImageField(blank=True, help_text='Photos from task completion', null=True, upload_to='task_completion_photos/')),
                ('completion_pdf', models.FileField(blank=True, help_text='Documents from task completion', null=True, upload_to='task_completion_pdfs/')),
                ('completion_submitted_date', models.DateTimeField(blank=True, null=True)),
                ('admin_approval_date', models.DateTimeField(blank=True, null=True)),
                ('admin_approval_notes', models.TextField(blank=True, help_text='Notes from admin when approving task')),
                ('completion_days', models.PositiveIntegerField(default=0, help_text='Expected completion time in days')),
                ('due_date', models.DateTimeField(blank=True, help_text='Due date for task completion', null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_task_assignments', to=settings.AUTH_USER_MODEL)),
                ('land', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_tasks', to='core.land')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_assignments', to='core.task')),
            ],
            options={
                'verbose_name': 'Land Task Assignment',
                'verbose_name_plural': 'Land Task Assignments',
                'ordering': ['-assigned_date'],
                'unique_together': {('land', 'task', 'employee')},
            },
        ),
        migrations.CreateModel(
            name='TaskManage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_manages', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_manages', to='core.task')),
            ],
            options={
                'verbose_name': 'Task Management',
                'verbose_name_plural': 'Task Management',
                'ordering': ['task__position', 'employee__username'],
                'unique_together': {('task', 'employee')},
            },
        ),
    ]
